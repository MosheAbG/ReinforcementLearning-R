##PIECE 2
##An approach where player usually sticks for 17 and above

SimulateBlackJackEpsiodeDeterministic16 = function(theseed, NumberHands){
 set.seed(theseed) 

    #Initializing the results matrix which has a row for each state 
    # The first columns are the total reward for each state 
    # The next 2 are the number of times each state was visited
    # The last 2 are the average reward in each state
    ResultsMatrix = matrix(0, nrow = 9, ncol = 6)
    
    for( j in 1:NumberHands){
# Initial sum of Player's hand        
SumOfHand = 0
 
 
# Initially All aces count for 11, later values may be changed   
Ace = 11
 # Player gets 2 cards randomly   
 PlayerCards = rep(0,2)   
PlayerCards[1] = sample(c(2:10,10,10,10,Ace),1, replace = TRUE)
 PlayerCards[2] = sample(c(2:10,10,10,10,Ace),1, replace = TRUE)  
# Defining 2 new variables
# One to check sum of player's hand after each step  
    IncrimentalSumOfHand = rep(0, length(PlayerCards))
         
    
    
   
   # Dealer gets 2 cards randomly  
   DealerCards = rep(0,2)  
    SumOfDealerHand = 0
DealerCards[1] = sample(c(2:10,10,10,10,Ace),1, replace = TRUE)
 DealerCards[2] = sample(c(2:10,10,10,10,Ace),1, replace = TRUE)  
  # Defining 2 new variables, same as for player
    IncrimentalSumOfDealerHand = rep(0, length(DealerCards))

    
    # Initially sum of hand is just sum of 2 cards
    SumOfDealerHand = sum(DealerCards)
#Player part will come later
# If both cards are aces, then second ace is worth one

    if((DealerCards[1] == Ace) && (DealerCards[2] == Ace)){
        DealerCards[2] = 1
        SumOfDealerHand = 12
        
        }
  
   
# Getting sum of hand after each additional card
        IncrimentalSumOfDealerHand[1] = DealerCards[1]
        IncrimentalSumOfDealerHand[2] = DealerCards[1] + DealerCards[2]
   
 #Switch back to player
#Initial sum of first 2 cards   
    SumOfHand = sum(PlayerCards)
# If both are aces still set to one and second ace becomes 1 so sum less than 22
    if((PlayerCards[1] == Ace) && (PlayerCards[2] == Ace)){
        PlayerCards[2] = 1
        SumOfHand = 12
        }
        
        # This will contain all actions selected in each hand
        ActionVec = rep(0,(length(PlayerCards) - 2))
  
    
 
        IncrimentalSumOfHand[1] = PlayerCards[1]
        IncrimentalSumOfHand[2] = PlayerCards[1] + PlayerCards[2]
        #Automatically hit for under 12
     while(SumOfHand<12){
        DrawCard = sample(c(2:10,10,10,10,Ace), 1 , replace = TRUE)
        NewHand = append(PlayerCards, DrawCard)# Add drawn card to hand
        PlayerCards = NewHand
        SumOfHand = sum(PlayerCards)# New sum of hand is sum of all cards in hand
         IncrimentalSumOfHand[length(PlayerCards)] = SumOfHand
         ActionVec[length(PlayerCards) - 2] = 1 #At this stage action will always be to hit
        if(SumOfHand>21 ){
            SumOfHand = 12
            PlayerCards[length(PlayerCards)] = 1
            IncrimentalSumOfHand[length(PlayerCards)] = SumOfHand
        }
         }
          
    #The action to be taken at each stage
    # Either the player hits or stands
  
    #Reward is only given at end
    # Intermediate steps do not receive a reward till end of hand
    # A random number between 0 and 1 to see if we are greedy 
   
        probExploit = runif((2*NumberHands),0,1)
       
   # Main part of code

        Action = 0
          while(SumOfHand < 21 && Action != 2){
              
             
              if(SumOfHand<17){
              if(probExploit[j] > 0.2){ #Select action to hit
                
               
                      Action = 1
                     
                      
               DrawCard = sample(c(2:10,10,10,10,Ace), 1 , replace = TRUE)
              NewHand = append(PlayerCards, DrawCard)# Add drawn card to hand
              PlayerCards = NewHand
                      ActionVec[length(PlayerCards) - 2] = Action
              SumOfHand = sum(PlayerCards)# New sum of hand is sum of all cards in hand 
              
            #New incrimental sum is sum of old cards plus new card  
              NewSum = append(IncrimentalSumOfHand[length(PlayerCards) - 1 ], DrawCard)
              
              IncrimentalSumOfHand[length(PlayerCards)] = sum(NewSum)
            
 # If sum of hand greater than 21, change last recieved ace from 11 to 1
# Update other variables accordingly 
                for(i in 1:length(PlayerCards)){      
    if(SumOfHand > 21){ 
        
            if(PlayerCards[i] == 11){
                
              PlayerCards[i] = 1
              
#Incriment total sum and incriment incrimental sum
                SumOfHand = sum(PlayerCards)
               IncrimentalSumOfHand[length(PlayerCards)] = SumOfHand
                
                }
            
}
                    }
                  probExploit[j] = probExploit[j+1] #Update random number being used
                     
       }
                 
                  
              
              if(probExploit[j] <= 0.2){ ## Choose to stand
                Action = 2

              
                 
                  ActionVec[length(PlayerCards) - 1] = Action
                      
                  break
                          
                  }
                  }
              if(SumOfHand>=17){
              if(probExploit[j] > 0.8){ #Select action to hit
                
               
                      Action = 1
                     
                      
               DrawCard = sample(c(2:10,10,10,10,Ace), 1 , replace = TRUE)
              NewHand = append(PlayerCards, DrawCard)# Add drawn card to hand
              PlayerCards = NewHand
                      ActionVec[length(PlayerCards) - 2] = Action
              SumOfHand = sum(PlayerCards)# New sum of hand is sum of all cards in hand
              
            #New incrimental sum is sum of old cards plus new card  
              NewSum = append(IncrimentalSumOfHand[length(PlayerCards) - 1 ], DrawCard)
              
              IncrimentalSumOfHand[length(PlayerCards)] = sum(NewSum)
            
 # If sum of hand greater than 21, change last recieved ace from 11 to 1
# Update other variables accordingly 
                for(i in 1:length(PlayerCards)){      
    if(SumOfHand > 21){ 
        
            if(PlayerCards[i] == 11){
                
              PlayerCards[i] = 1
              
#Incriment total sum and incriment incrimental sum
                SumOfHand = sum(PlayerCards)
               IncrimentalSumOfHand[length(PlayerCards)] = SumOfHand
                
                }
            
}
                    }
                  probExploit[j] = probExploit[j+1]
                     
       }
                
                  
              
              if(probExploit[j] <= 0.8){ ## Choose action to stand
                Action = 2

              
                 
                  ActionVec[length(PlayerCards) - 1] = Action
                      
                  break
                          
                  }
                  }
              }
                      
         
   
    if((SumOfHand<22)){
        if(!(SumOfHand == 21 && length(PlayerCards) == 2 )){
        
  #Dealer hits for anything under 17, until he reaches a number between 17 and 21 or goes busts
# The following code will be sparsely commented as it's very similar to above    
          while(SumOfDealerHand < 17){
               DrawCard = sample(c(2:10,10,10,10,Ace), 1 , replace = TRUE)
              NewHand = append(DealerCards, DrawCard)
              DealerCards = NewHand
              SumOfDealerHand = sum(DealerCards)
                         
       
              NewSum = append(IncrimentalSumOfDealerHand[length(DealerCards) - 1 ], DrawCard)
              
              IncrimentalSumOfDealerHand[length(DealerCards)] = sum(NewSum)
            
              
              
              
    # If dealer hand greater than 21 and ace(s) are 11, then change ace to 1

    if(SumOfDealerHand > 21){ 
        for( i in length(DealerCards):1){
            if(DealerCards[i] == 11){
              DealerCards[i] = 1
               
                SumOfDealerHand = sum(DealerCards)
               IncrimentalSumOfDealerHand[length(DealerCards)] = SumOfDealerHand
                break
                }
            


 }
}
              }
        }
        }
 
        
        
   
    # Different Reward scenarios depending on both player and dealer sum
# If player busts, he loses
 if(SumOfHand>21){
     Reward = -1
     }

# If both have naturals then tie
    else if((SumOfHand == 21 && length(PlayerCards) == 2) && (SumOfDealerHand == 21 && length(DealerCards) == 2)){
        Reward = 0
        }
#If player has natural and dealer doesn't player wins
   else if((SumOfHand == 21 && length(PlayerCards) == 2) && (!(SumOfDealerHand == 21 && length(DealerCards) == 2 ))){
        Reward = 3
        }
#If dealer has natural and player doesn't then dealer wins
   else if((SumOfDealerHand == 21 && length(DealerCards) == 2) && (!(SumOfHand == 21 && length(PlayerCards) == 2 ))){
        Reward = -1
        }
      else if((SumOfHand == 21 && length(PlayerCards)!=2) && SumOfDealerHand != 21){
          Reward = 2
          }
# If both players have same sum, then it's a tie
    else if((SumOfHand == SumOfDealerHand)){
        Reward = -1
        }
# If player has better hand than dealer then player wins
    else if(SumOfHand<22 && (SumOfHand>SumOfDealerHand)){
        Reward = 1
        }
   else if((SumOfHand<22 && SumOfDealerHand<22) && (SumOfHand<SumOfDealerHand)){
        Reward = -1
        }
       # If dealer busts, he losses
    else if(SumOfDealerHand > 21){
        Reward = 1
        }
       
       #After each hand update the results matrix accordingly
        for( k in 1:(length(PlayerCards) - 1)){
      if(IncrimentalSumOfHand[k+1] < 21 && IncrimentalSumOfHand[k+1] > 11){ #Only these states matter
        if(ActionVec[k] == 1){ #if action is to search
            
           
          
a = ResultsMatrix[IncrimentalSumOfHand[k + 1] -11 ,1 ] = ResultsMatrix[IncrimentalSumOfHand[k+1] -11 ,1 ] + Reward #Add current reward to previous rewards
b = ResultsMatrix[IncrimentalSumOfHand[k + 1] -11 ,3 ] = ResultsMatrix[IncrimentalSumOfHand[k + 1] -11 ,3 ] + 1 #add 1 to number of hands
ResultsMatrix[IncrimentalSumOfHand[k + 1] -11 ,5 ] = a/b
               
                    
        }
          
            }
        
               if(IncrimentalSumOfHand[k+1] < 21 && IncrimentalSumOfHand[k+1] > 11){
        if(ActionVec[k] == 2 && (length(PlayerCards)>2)){
          
#chosen action has updated mean
a = ResultsMatrix[IncrimentalSumOfHand[k + 1] -11 ,2 ] = ResultsMatrix[IncrimentalSumOfHand[length(PlayerCards)] -11 ,2 ] + Reward
b = ResultsMatrix[IncrimentalSumOfHand[k + 1] -11 ,4 ] = ResultsMatrix[IncrimentalSumOfHand[length(PlayerCards)] -11 ,4 ] + 1
ResultsMatrix[IncrimentalSumOfHand[k + 1] -11 ,6 ] = a/b 
          
        }
              if(length(PlayerCards) == 2 && ActionVec[k] == 2){
        for( k in 1:1){ #If standing and only 2 cards then there will only be one action in action vector
        
        
        if(ActionVec[k] == 2 && SumOfHand!=21){
          
#chosen action has updated mean
a = ResultsMatrix[IncrimentalSumOfHand[k + 1] -11 ,2 ] = ResultsMatrix[IncrimentalSumOfHand[length(PlayerCards)] -11 ,2 ] + Reward
b = ResultsMatrix[IncrimentalSumOfHand[k + 1] -11 ,4 ] = ResultsMatrix[IncrimentalSumOfHand[length(PlayerCards)] -11 ,4 ] + 1
ResultsMatrix[IncrimentalSumOfHand[k + 1] -11 ,6 ] = a/b 
            
        }
        
        }
            }   
        }
                  }
     }
            
                   
return(ResultsMatrix)
   
}
       SimulateBlackJackEpsiodeDeterministic16(300,1000)